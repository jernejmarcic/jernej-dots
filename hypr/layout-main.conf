master {
    # Enable adding additional master windows in a horizontal split style
    # true  = allows multiple master windows in a row
    # false = single master window only
    allow_small_split = false  

    # The scale factor of the special workspace windows
    # Range: 0.0 - 1.0 (1.0 = full scale)
    special_scale_factor = 1  

    # The size of the master window as a percentage of the screen
    # Example: 0.70 means 70% of the screen is the master window, and 30% is for slave windows
    # Range: 0.0 - 1.0
    mfact = 0.55  

    # Determines where new windows are placed
    # "master"  -> new windows become the master
    # "slave"   -> new windows go to the slave stack
    # "inherit" -> new windows inherit from the focused window
    new_status = slave  

    # Whether a newly opened window should be on the top of the stack
    # true  = new windows appear at the top
    # false = new windows appear at the bottom
    new_on_top = false  

    # Determines the relative placement of new windows to the focused window
    # "before" -> places new window before the focused one
    # "after"  -> places new window after the focused one
    # "none"   -> follows the new_on_top rule instead
    new_on_active = none  

    # Default placement of the master area in the layout
    # Options: "left", "right", "top", "bottom", "center"
    orientation = left  

    # Inherit fullscreen status when swapping/cycling to another window
    # true  = fullscreen persists when switching windows
    # false = fullscreen is reset when switching windows
    inherit_fullscreen = true  

    # Minimum number of slave windows required before the master window is centered (only applies if orientation = center)
    # Set 0 to always center the master window
    slave_count_for_center_master = 2  

    # When using center orientation, determines if slaves appear on the right side of the master window
    # true  = slave windows appear to the right of the master
    # false = slave windows appear to the left of the master
    center_master_slaves_on_right = true  

    # Determines how window resizing works
    # true  = resizing direction is based on the mouse cursor position relative to window corners
    # false = resizing follows the tiling position of the window
    smart_resizing = true  

    # Determines how dragging and dropping windows affects placement
    # true  = dropped windows are placed at the cursor position
    # false = dropped windows go to the top/bottom of the stack based on new_on_top
    drop_at_cursor = true  
}

